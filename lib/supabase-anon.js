/**
 * üîì SUPABASE ANON CLIENT - Tentativa com chave an√¥nima
 *
 * Teste usando ANON_KEY ao inv√©s de SERVICE_ROLE_KEY
 * para verificar se o problema √© de permiss√µes RLS
 */

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

console.log("üîì [SUPABASE-ANON] Inicializando com chave an√¥nima...");
console.log("üîì [SUPABASE-ANON] URL:", supabaseUrl ? "DEFINIDA" : "‚ùå N√ÉO DEFINIDA");
console.log("üîì [SUPABASE-ANON] Anon Key:", supabaseAnonKey ? "DEFINIDA" : "‚ùå N√ÉO DEFINIDA");

if (!supabaseUrl || !supabaseAnonKey) {
  console.error("‚ùå [SUPABASE-ANON] Vari√°veis de ambiente n√£o configuradas");
  throw new Error("SUPABASE_URL e SUPABASE_ANON_KEY s√£o obrigat√≥rios");
}

/**
 * Headers para requisi√ß√µes com chave an√¥nima
 */
const headers = {
  "Content-Type": "application/json",
  Authorization: `Bearer ${supabaseAnonKey}`,
  apikey: supabaseAnonKey,
  Prefer: "return=representation",
};

/**
 * Fun√ß√£o helper para fazer requisi√ß√µes com chave an√¥nima
 */
async function supabaseAnonFetch(endpoint, options = {}) {
  const url = `${supabaseUrl}/rest/v1/${endpoint}`;

  console.log(`üîì [SUPABASE-ANON] ${options.method || "GET"} ${endpoint}`);

  const response = await fetch(url, {
    headers,
    ...options,
  });

  const responseText = await response.text();
  console.log(`üîì [SUPABASE-ANON] Response ${response.status}:`, responseText);

  if (!response.ok) {
    console.error(`‚ùå [SUPABASE-ANON] Error ${response.status}:`, responseText);
    throw new Error(`Supabase API Error (ANON): ${response.status} - ${responseText}`);
  }

  try {
    const data = JSON.parse(responseText);
    console.log(`‚úÖ [SUPABASE-ANON] Success: ${Array.isArray(data) ? data.length : "single"} record(s)`);
    return data;
  } catch (parseError) {
    console.error("‚ùå [SUPABASE-ANON] JSON Parse Error:", parseError);
    throw new Error(`JSON Parse Error: ${parseError.message}`);
  }
}

/**
 * Buscar planos usando chave an√¥nima
 */
export async function getPlansAnon() {
  try {
    return await supabaseAnonFetch("Plan?isActive=eq.true&order=order.asc");
  } catch (error) {
    console.error("‚ùå [PLANS-ANON] Erro:", error.message);
    throw error;
  }
}

/**
 * Buscar produtos usando chave an√¥nima
 */
export async function getProductsAnon() {
  try {
    return await supabaseAnonFetch(
      "Product?isActive=eq.true&order=createdAt.desc&select=*,images:ProductImage(*),store:Store(*,seller:Seller(*,user:User(*)))"
    );
  } catch (error) {
    console.error("‚ùå [PRODUCTS-ANON] Erro:", error.message);
    throw error;
  }
}

/**
 * Buscar lojas usando chave an√¥nima
 */
export async function getStoresAnon() {
  try {
    return await supabaseAnonFetch("Store?isActive=eq.true&select=*,seller:Seller(*,user:User(*))");
  } catch (error) {
    console.error("‚ùå [STORES-ANON] Erro:", error.message);
    throw error;
  }
}

/**
 * Buscar configura√ß√µes de tracking usando chave an√¥nima
 */
export async function getTrackingConfigsAnon() {
  try {
    return await supabaseAnonFetch("SystemConfig?category=eq.tracking&isActive=eq.true&select=key,value,isActive");
  } catch (error) {
    console.error("‚ùå [TRACKING-ANON] Erro:", error.message);
    throw error;
  }
}

console.log("‚úÖ [SUPABASE-ANON] Inicializado com sucesso");

export default {
  getPlansAnon,
  getProductsAnon,
  getStoresAnon,
  getTrackingConfigsAnon,
};
