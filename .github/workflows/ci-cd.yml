name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===============================
  # Etapa de Teste e Qualidade
  # ===============================
  test:
    name: Tests & Quality Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test environment
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        JWT_SECRET: test-secret-key-with-at-least-32-characters-for-security
        REDIS_URL: redis://localhost:6379
      run: |
        # Generate Prisma client
        npx prisma generate
        # Run migrations
        npx prisma db push

    - name: Run type checking
      run: npm run type-check

    - name: Run linting
      run: npm run lint:ci

    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        JWT_SECRET: test-secret-key-with-at-least-32-characters-for-security
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
      run: npm run test:ci

    - name: Run security audit
      run: npm run security-check

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        fail_ci_if_error: false

    - name: Build application
      env:
        NODE_ENV: production
      run: npm run build

  # ===============================
  # Testes E2E
  # ===============================
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install --with-deps

    - name: Run E2E tests
      env:
        DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      run: npm run test:e2e

    - name: Upload E2E results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-results
        path: test-results/

  # ===============================
  # Build Docker Image
  # ===============================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_OUTPUT

  # ===============================
  # Deploy to Staging
  # ===============================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.vendeuonline.com

    steps:
    - name: Deploy to Staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          # Update the application
          cd /opt/vendeu-online-staging
          
          # Pull latest image
          docker pull ${{ needs.build.outputs.image }}
          
          # Update environment
          export IMAGE_TAG="${{ needs.build.outputs.image }}"
          
          # Deploy with zero downtime
          docker-compose -f docker-compose.staging.yml up -d --no-deps app
          
          # Health check
          sleep 30
          curl -f http://localhost:3000/api/health || exit 1
          
          # Cleanup old images
          docker image prune -af

    - name: Run smoke tests on staging
      run: |
        # Wait for deployment
        sleep 60
        
        # Basic health check
        curl -f https://staging.vendeuonline.com/api/health
        
        # API test
        curl -f https://staging.vendeuonline.com/api/products?limit=1

  # ===============================
  # Deploy to Production
  # ===============================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, e2e, build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://vendeuonline.com

    steps:
    - name: Create deployment
      id: deployment
      uses: actions/github-script@v7
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            required_contexts: [],
            auto_merge: false
          });
          return deployment.data.id;

    - name: Set deployment status to in progress
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{ steps.deployment.outputs.result }},
            state: 'in_progress',
            description: 'Deployment started'
          });

    - name: Deploy to Production
      id: deploy
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          # Backup current version
          cd /opt/vendeu-online
          docker tag vendeu-online:current vendeu-online:backup-$(date +%Y%m%d-%H%M%S) || true
          
          # Pull latest image
          docker pull ${{ needs.build.outputs.image }}
          docker tag ${{ needs.build.outputs.image }} vendeu-online:current
          
          # Run database migrations
          export DATABASE_URL="${{ secrets.DATABASE_URL }}"
          docker run --rm --network host -e DATABASE_URL vendeu-online:current npx prisma migrate deploy
          
          # Deploy with rolling update
          docker-compose -f docker-compose.prod.yml up -d --no-deps --scale app=2 app-new
          
          # Health check on new instances
          sleep 60
          curl -f http://localhost:3001/api/health || exit 1
          
          # Switch traffic to new instances
          docker-compose -f docker-compose.prod.yml up -d --no-deps nginx
          
          # Remove old instances
          docker-compose -f docker-compose.prod.yml stop app
          docker-compose -f docker-compose.prod.yml rm -f app
          
          # Rename new instances
          docker-compose -f docker-compose.prod.yml exec app-new mv app app
          
          # Cleanup
          docker image prune -af
          docker volume prune -f

    - name: Set deployment status to success
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{ steps.deployment.outputs.result }},
            state: 'success',
            description: 'Deployment successful',
            environment_url: 'https://vendeuonline.com'
          });

    - name: Set deployment status to failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{ steps.deployment.outputs.result }},
            state: 'failure',
            description: 'Deployment failed'
          });

    - name: Rollback on failure
      if: failure()
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/vendeu-online
          # Rollback to backup version
          docker tag vendeu-online:backup-latest vendeu-online:current || true
          docker-compose -f docker-compose.prod.yml up -d --no-deps app

    - name: Run production smoke tests
      if: success()
      run: |
        # Wait for deployment stabilization
        sleep 120
        
        # Health check
        curl -f https://vendeuonline.com/api/health
        
        # API endpoints test
        curl -f https://vendeuonline.com/api/products?limit=1
        curl -f https://vendeuonline.com/api/stores?limit=1

  # ===============================
  # Notificações
  # ===============================
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && (github.ref == 'refs/heads/main')

    steps:
    - name: Notify on success
      if: needs.deploy-production.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          ✅ Production deployment successful!
          
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          🚀 https://vendeuonline.com
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: Notify on failure
      if: needs.deploy-production.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ❌ Production deployment failed!
          
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          Please check the logs and fix the issues.
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ===============================
  # Limpeza e Backup
  # ===============================
  cleanup:
    name: Cleanup & Backup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success() && github.ref == 'refs/heads/main'

    steps:
    - name: Trigger backup
      run: |
        curl -X POST "${{ secrets.BACKUP_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{"event": "deployment_success", "commit": "${{ github.sha }}"}'

    - name: Cleanup old Docker images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME }}
        package-type: container
        min-versions-to-keep: 5
        delete-only-untagged-versions: true