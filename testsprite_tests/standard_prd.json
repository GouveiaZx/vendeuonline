{
  "meta": {
    "project": "Vendeu Online",
    "date": "2025-09-09",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "Vendeu Online is a comprehensive full-stack multi-vendor e-commerce marketplace tailored for the Brazilian market. It connects sellers and buyers on a modern platform featuring subscription-based monetization, integrated native payment methods, and a robust store and product management system.",
  "core_goals": [
    "Enable scalable multi-vendor marketplace for Brazilian sellers",
    "Provide intuitive and efficient shopping experience for buyers",
    "Implement tiered subscription plans with automated billing and limits",
    "Integrate with Brazilian payment gateways including PIX, Boleto, and Card",
    "Offer detailed analytics and reporting for sellers and admins",
    "Maintain high standards of security and reliability across the platform"
  ],
  "key_features": [
    "Secure JWT-based authentication with roles: Buyer, Seller, Admin",
    "Comprehensive product catalog with CRUD, images, categories, SEO and approval workflow",
    "Seller store creation, branding, verification and performance analytics",
    "Complete e-commerce workflow including persistent cart, wishlist, checkout and order tracking",
    "Review and rating system with purchase verification and moderation tools",
    "Subscription management with multiple plans, billing periods, feature limits and plan upgrades/downgrades",
    "Payment gateway integration with ASAAS supporting multiple payment methods, split payments and refunds",
    "Admin tools for user management, content moderation, global analytics, banner management and audit logging",
    "Progressive Web App support with offline functionality, push notifications and app-like experience",
    "Security features including CSRF protection, rate limiting, input validation, and comprehensive audit logging"
  ],
  "user_flow_summary": [
    "Buyer browses products via search or category, views product details and reviews, adds items to cart, manages addresses, completes checkout with preferred payment, and tracks order status",
    "Seller registers, creates and customizes store with branding, adds and manages products with approval process, processes incoming orders, and reviews store analytics and subscription status",
    "Admin logs in to moderate content by approving or rejecting products and stores, manages users and subscriptions, configures platform-wide settings like banners and plans, and reviews audit logs for compliance"
  ],
  "validation_criteria": [
    "Platform maintains uptime greater than 99.5% with API response times under 500ms",
    "User authentication is secure with JWT tokens expiring after 7 days and bcrypt password hashing",
    "Subscription limits enforce product/image count restrictions and allow plan upgrades/downgrades seamlessly",
    "Payment processes correctly through ASAAS supporting refunds, splits, and multiple payment methods",
    "Product approval workflow correctly restricts visibility of pending or rejected items",
    "Admin audit logs capture and retain all administrative actions with relevant metadata",
    "End-to-end core flows such as product browsing, checkout, order management, and subscription changes pass automated testing suites",
    "PWA features function correctly including offline usage, push notifications, and app installation prompts"
  ],
  "code_summary": {
    "codebase_summary": {
      "project_name": "Vendeu Online",
      "project_description": "Full-stack multi-vendor e-commerce marketplace built with React + TypeScript + Vite, supporting sellers, buyers, and admins",
      "version": "1.0.0",
      "language_primary": "TypeScript/JavaScript",
      "generated_at": "2025-09-09T12:00:00Z",
      "analysis_scope": "Complete codebase including frontend, backend API, and database models"
    },
    "tech_stack": {
      "frontend": {
        "framework": "React 18",
        "language": "TypeScript",
        "build_tool": "Vite 6.3.5",
        "styling": "Tailwind CSS 3.4.17",
        "routing": "React Router DOM 7.3.0",
        "state_management": "Zustand 5.0.3 with persist middleware",
        "forms": "React Hook Form 7.61.1 + Zod 4.0.10",
        "ui_components": "Radix UI primitives",
        "icons": "Lucide React 0.511.0",
        "charts": "Recharts 3.1.0",
        "notifications": "Sonner 2.0.2",
        "pwa": "Vite PWA Plugin 1.0.2"
      },
      "backend": {
        "runtime": "Node.js",
        "framework": "Express.js 4.21.2",
        "language": "JavaScript (ES Modules)",
        "authentication": "JWT (jsonwebtoken 9.0.2)",
        "password_hashing": "bcryptjs 3.0.2",
        "validation": "Zod 4.0.10 + express-validator 7.2.1",
        "security": "Helmet 8.1.0, CORS 2.8.5, CSRF protection",
        "rate_limiting": "express-rate-limit 8.1.0",
        "file_upload": "Multer 2.0.2"
      },
      "database": {
        "primary": "PostgreSQL (via Supabase)",
        "orm": "Prisma 6.15.0 with Prisma Client 6.15.0",
        "migrations": "Prisma Migrate",
        "seeding": "Custom seed scripts"
      },
      "cloud_services": {
        "hosting": "Vercel",
        "database": "Supabase PostgreSQL",
        "file_storage": "Supabase Storage (primary), Cloudinary (fallback)",
        "authentication": "JWT with Supabase integration",
        "payments": "ASAAS (Brazilian payment gateway)"
      },
      "development": {
        "package_manager": "npm",
        "linting": "ESLint 9.25.0 with TypeScript ESLint 8.30.1",
        "testing": "Playwright 1.55.0",
        "concurrency": "concurrently 8.2.2 (for dev server)",
        "typescript": "TypeScript 5.8.3"
      }
    },
    "architecture": {
      "pattern": "Full-stack monorepo with separation of concerns",
      "frontend_structure": "React App Router pattern (Next.js style) in src/app/",
      "backend_structure": "Express.js REST API with modular routes",
      "database_design": "Relational PostgreSQL with Prisma ORM",
      "authentication": "JWT-based with role-based access control (RBAC)",
      "state_management": "Zustand stores with persistence",
      "file_organization": {
        "src/app/": "Page components following App Router pattern",
        "src/components/": "Reusable UI components",
        "src/store/": "Zustand state management stores",
        "src/lib/": "Utility functions and configurations",
        "src/hooks/": "Custom React hooks",
        "server/": "Express.js backend API",
        "server/routes/": "API route handlers",
        "server/lib/": "Backend utilities and database config",
        "server/middleware/": "Express middleware functions",
        "prisma/": "Database schema and migrations"
      }
    },
    "user_roles": {
      "BUYER": {
        "description": "End users who purchase products",
        "capabilities": ["Browse products", "Add to cart", "Place orders", "Manage wishlist", "Leave reviews"],
        "protected_routes": ["/buyer/*", "/cart", "/checkout", "/orders"]
      },
      "SELLER": {
        "description": "Vendors who sell products through the platform",
        "capabilities": [
          "Create/manage store",
          "Add/edit products",
          "Process orders",
          "Subscribe to plans",
          "View analytics"
        ],
        "protected_routes": ["/seller/*", "/seller/products", "/seller/orders", "/seller/analytics"]
      },
      "ADMIN": {
        "description": "Platform administrators with full access",
        "capabilities": [
          "Manage all users",
          "Moderate content",
          "Configure platform",
          "View all analytics",
          "Manage plans/banners"
        ],
        "protected_routes": ["/admin/*", "/admin/users", "/admin/products", "/admin/stores"]
      }
    },
    "database_models": {
      "core_entities": {
        "User": {
          "description": "Base user model with polymorphic relations",
          "key_fields": [
            "id",
            "name",
            "email",
            "password",
            "phone",
            "type",
            "city",
            "state",
            "isVerified",
            "isActive",
            "asaasCustomerId"
          ],
          "relations": ["buyer", "seller", "admin", "orders", "addresses", "reviews", "subscriptions"]
        },
        "Buyer": {
          "description": "Specific buyer profile",
          "key_fields": ["id", "userId"],
          "relations": ["user", "wishlists"]
        },
        "Seller": {
          "description": "Specific seller profile",
          "key_fields": ["id", "userId", "planId", "rating", "totalSales", "commission", "isVerified"],
          "relations": ["user", "plan", "store", "products", "orders", "subscriptions"]
        },
        "Admin": {
          "description": "Admin profile with permissions",
          "key_fields": ["id", "userId", "permissions"],
          "relations": ["user"]
        },
        "Store": {
          "description": "Seller's store/shop",
          "key_fields": [
            "id",
            "sellerId",
            "name",
            "slug",
            "description",
            "email",
            "phone",
            "city",
            "state",
            "logo",
            "banner",
            "isVerified",
            "isActive",
            "theme"
          ],
          "relations": ["seller", "products", "orders", "reviews"]
        },
        "Product": {
          "description": "Products for sale",
          "key_fields": [
            "id",
            "sellerId",
            "storeId",
            "categoryId",
            "name",
            "description",
            "price",
            "comparePrice",
            "stock",
            "sku",
            "isActive",
            "isFeatured",
            "approvalStatus",
            "rating",
            "reviewCount",
            "salesCount"
          ],
          "relations": ["seller", "store", "category", "images", "specifications", "orderItems", "wishlists", "reviews"]
        },
        "Category": {
          "description": "Product categorization",
          "key_fields": ["id", "name", "slug", "description", "parentId", "isActive", "order", "productCount"],
          "relations": ["parent", "children", "products"]
        },
        "Order": {
          "description": "Purchase orders",
          "key_fields": [
            "id",
            "buyerId",
            "sellerId",
            "storeId",
            "status",
            "paymentStatus",
            "paymentMethod",
            "subtotal",
            "total",
            "trackingCode"
          ],
          "relations": ["buyer", "seller", "store", "shippingAddress", "billingAddress", "items"]
        },
        "Plan": {
          "description": "Subscription plans for sellers",
          "key_fields": [
            "id",
            "name",
            "slug",
            "description",
            "price",
            "billingPeriod",
            "maxAds",
            "maxPhotos",
            "maxProducts",
            "features",
            "isActive"
          ],
          "relations": ["subscriptions", "sellers"]
        },
        "Subscription": {
          "description": "Active subscriptions",
          "key_fields": ["id", "userId", "sellerId", "planId", "status", "startDate", "endDate", "nextBilling"],
          "relations": ["user", "seller", "plan"]
        }
      },
      "supporting_entities": {
        "ProductImage": "Product images with ordering",
        "ProductSpecification": "Product technical specifications",
        "Address": "User shipping/billing addresses",
        "OrderItem": "Individual items within orders",
        "Wishlist": "User favorite products",
        "Review": "Product and store reviews",
        "Banner": "Promotional banners",
        "AuditLog": "Admin action logging",
        "SystemConfig": "Platform configuration"
      },
      "enums": {
        "UserType": ["BUYER", "SELLER", "ADMIN"],
        "OrderStatus": ["PENDING", "CONFIRMED", "PROCESSING", "SHIPPED", "DELIVERED", "CANCELLED", "REFUNDED"],
        "PaymentStatus": ["PENDING", "PROCESSING", "PAID", "FAILED", "REFUNDED"],
        "PaymentMethod": ["CREDIT_CARD", "DEBIT_CARD", "PIX", "BOLETO", "WHATSAPP"],
        "SubscriptionStatus": ["PENDING", "ACTIVE", "CANCELLED", "EXPIRED"],
        "ApprovalStatus": ["PENDING", "APPROVED", "REJECTED"],
        "BannerPosition": ["HEADER", "SIDEBAR", "FOOTER", "CATEGORY", "HOME_HERO", "HOME_FEATURED"]
      }
    },
    "api_endpoints": {
      "base_url": "http://localhost:4002/api",
      "authentication": {
        "type": "JWT Bearer Token",
        "header": "Authorization: Bearer <token>",
        "expiration": "7 days"
      },
      "endpoints": {
        "/health": {
          "method": "GET",
          "description": "API health check",
          "authentication": false,
          "response": "API status and version information"
        },
        "/csrf-token": {
          "method": "GET",
          "description": "Get CSRF protection token",
          "authentication": true,
          "response": "CSRF token for form submissions"
        },
        "/auth/login": {
          "method": "POST",
          "description": "User authentication",
          "authentication": false,
          "body": {
            "email": "string (required)",
            "password": "string (required)",
            "userType": "string (optional)"
          },
          "response": {
            "success": "boolean",
            "message": "string",
            "user": "object",
            "token": "string",
            "expiresIn": "string"
          }
        },
        "/auth/register": {
          "method": "POST",
          "description": "User registration",
          "authentication": false,
          "body": {
            "name": "string (required)",
            "email": "string (required)",
            "password": "string (required)",
            "phone": "string (required)",
            "city": "string (required)",
            "state": "string (required)",
            "userType": "string (required)"
          },
          "response": {
            "success": "boolean",
            "message": "string",
            "user": "object",
            "token": "string"
          }
        },
        "/products": {
          "method": "POST",
          "description": "Create new product (Seller/Admin only)",
          "authentication": true,
          "roles": ["SELLER", "ADMIN"],
          "body": {
            "name": "string (required)",
            "description": "string (required)",
            "price": "number (required)",
            "stock": "number (required)",
            "categoryId": "string (required)",
            "images": "array (optional)",
            "specifications": "array (optional)"
          }
        },
        "/products/:id": {
          "method": "GET",
          "description": "Get product details by ID",
          "authentication": false,
          "params": {
            "id": "string (required)"
          }
        },
        "/products/:id/related": {
          "method": "GET",
          "description": "Get related products",
          "authentication": false,
          "params": {
            "id": "string (required)"
          },
          "query_params": {
            "limit": "number (default: 4)"
          }
        },
        "/stores": {
          "method": "GET",
          "description": "List stores with filtering",
          "authentication": false,
          "query_params": {
            "page": "number",
            "limit": "number",
            "search": "string",
            "verified": "boolean",
            "city": "string",
            "state": "string"
          }
        },
        "/categories": {
          "method": "GET",
          "description": "List all active categories",
          "authentication": false,
          "response": {
            "data": "array of categories"
          }
        },
        "/plans": {
          "method": "GET",
          "description": "List subscription plans",
          "authentication": false,
          "response": {
            "data": "array of plans with pricing and features"
          }
        },
        "/users/profile": {
          "method": "PUT",
          "description": "Update user profile",
          "authentication": true,
          "csrf_protection": true,
          "body": {
            "name": "string",
            "phone": "string",
            "city": "string",
            "state": "string"
          }
        },
        "/users/password": {
          "method": "PUT",
          "description": "Change user password",
          "authentication": true,
          "csrf_protection": true,
          "body": {
            "currentPassword": "string (required)",
            "newPassword": "string (required)"
          }
        },
        "/users/avatar": {
          "method": "POST",
          "description": "Update user avatar",
          "authentication": true,
          "csrf_protection": true,
          "rate_limited": true,
          "body": {
            "avatar": "string (URL)"
          }
        },
        "/addresses": {
          "method": "POST",
          "description": "Add new address",
          "authentication": true,
          "csrf_protection": true,
          "body": {
            "label": "string",
            "street": "string",
            "number": "string",
            "city": "string",
            "state": "string",
            "zipCode": "string",
            "isDefault": "boolean"
          }
        },
        "/addresses/:id": {
          "method": "DELETE",
          "description": "Delete address",
          "authentication": true,
          "csrf_protection": true
        },
        "/orders": {
          "method": "GET",
          "description": "List user orders",
          "authentication": true,
          "response": {
            "success": "boolean",
            "orders": "array",
            "pagination": "object"
          }
        },
        "/wishlist": {
          "method": "GET",
          "description": "Get user wishlist",
          "authentication": true,
          "response": {
            "success": "boolean",
            "data": "array",
            "total": "number"
          }
        },
        "/users/stats": {
          "method": "GET",
          "description": "Get user statistics",
          "authentication": true,
          "response": {
            "stats": "object with orders, favorites, spending data"
          }
        },
        "/payments/create": {
          "method": "POST",
          "description": "Create payment for subscription",
          "authentication": true,
          "body": {
            "planId": "string (required)",
            "paymentMethod": "string (required)"
          }
        },
        "/admin/stats": {
          "method": "GET",
          "description": "Admin dashboard statistics",
          "authentication": true,
          "roles": ["ADMIN"],
          "rate_limited": true,
          "response": "Platform-wide statistics and metrics"
        },
        "/admin/users": {
          "method": "POST",
          "description": "Admin create user",
          "authentication": true,
          "roles": ["ADMIN"],
          "csrf_protection": true,
          "audit_logged": true
        },
        "/admin/users/:id": {
          "method": "DELETE",
          "description": "Admin delete user",
          "authentication": true,
          "roles": ["ADMIN"],
          "csrf_protection": true,
          "audit_logged": true
        },
        "/admin/stores": {
          "method": "GET",
          "description": "Admin store management",
          "authentication": true,
          "roles": ["ADMIN"],
          "rate_limited": true
        },
        "/admin/stores/:id": {
          "method": "PUT",
          "description": "Admin approve/suspend store",
          "authentication": true,
          "roles": ["ADMIN"],
          "csrf_protection": true,
          "audit_logged": true
        },
        "/admin/products": {
          "method": "GET",
          "description": "Admin product management",
          "authentication": true,
          "roles": ["ADMIN"],
          "rate_limited": true
        },
        "/admin/products/:id/approval": {
          "method": "PATCH",
          "description": "Admin approve/reject product",
          "authentication": true,
          "roles": ["ADMIN"],
          "csrf_protection": true,
          "audit_logged": true,
          "body": {
            "approvalStatus": "string (APPROVED/REJECTED)",
            "rejectionReason": "string (optional)"
          }
        },
        "/admin/subscriptions": {
          "method": "GET",
          "description": "Admin subscription management",
          "authentication": true,
          "roles": ["ADMIN"],
          "rate_limited": true
        },
        "/admin/banners": {
          "method": "POST",
          "description": "Admin create banner",
          "authentication": true,
          "roles": ["ADMIN"],
          "csrf_protection": true,
          "audit_logged": true,
          "body": {
            "title": "string (required)",
            "imageUrl": "string (required)",
            "position": "string (required)",
            "targetUrl": "string (optional)",
            "isActive": "boolean"
          }
        },
        "/admin/plans": {
          "method": "GET",
          "description": "Admin plan management",
          "authentication": true,
          "roles": ["ADMIN"],
          "rate_limited": true
        },
        "/admin/audit-logs": {
          "method": "GET",
          "description": "Admin audit log viewing",
          "authentication": true,
          "roles": ["ADMIN"],
          "rate_limited": true,
          "query_params": {
            "page": "number",
            "action": "string",
            "resource": "string",
            "success": "boolean"
          }
        }
      }
    },
    "features": {
      "core_ecommerce": {
        "product_catalog": {
          "description": "Product browsing and search",
          "capabilities": [
            "Product listing",
            "Search and filtering",
            "Category browsing",
            "Product details",
            "Image galleries",
            "Specifications",
            "Reviews and ratings"
          ]
        },
        "shopping_cart": {
          "description": "Shopping cart and checkout",
          "capabilities": [
            "Add to cart",
            "Cart management",
            "Checkout process",
            "Address management",
            "Payment integration"
          ]
        },
        "order_management": {
          "description": "Order processing and tracking",
          "capabilities": ["Order placement", "Order status tracking", "Order history", "Shipping management"]
        },
        "user_accounts": {
          "description": "User registration and profiles",
          "capabilities": ["User registration", "Profile management", "Address book", "Order history", "Wishlist"]
        }
      },
      "seller_features": {
        "store_management": {
          "description": "Seller store creation and management",
          "capabilities": ["Store creation", "Store branding", "Store verification", "Store analytics"]
        },
        "product_management": {
          "description": "Product creation and inventory",
          "capabilities": [
            "Product creation",
            "Image upload",
            "Inventory management",
            "Product approval workflow",
            "Bulk operations"
          ]
        },
        "order_processing": {
          "description": "Seller order management",
          "capabilities": ["Order notifications", "Order fulfillment", "Shipping management", "Customer communication"]
        },
        "analytics": {
          "description": "Seller performance analytics",
          "capabilities": ["Sales reports", "Product performance", "Customer insights", "Revenue tracking"]
        },
        "subscription_plans": {
          "description": "Tiered seller plans",
          "capabilities": ["Plan selection", "Feature limits", "Payment processing", "Plan upgrades"]
        }
      },
      "admin_features": {
        "user_management": {
          "description": "Platform user administration",
          "capabilities": ["User listing", "User verification", "Account suspension", "Role management"]
        },
        "content_moderation": {
          "description": "Content approval and moderation",
          "capabilities": ["Product approval", "Store verification", "Content review", "Rejection management"]
        },
        "platform_analytics": {
          "description": "Platform-wide analytics",
          "capabilities": ["Dashboard metrics", "User statistics", "Revenue reports", "Performance monitoring"]
        },
        "system_management": {
          "description": "Platform configuration",
          "capabilities": ["Banner management", "Plan management", "Category management", "System configuration"]
        },
        "audit_logging": {
          "description": "Administrative action tracking",
          "capabilities": ["Action logging", "Audit trail", "Security monitoring", "Compliance reporting"]
        }
      },
      "technical_features": {
        "authentication": {
          "description": "Secure user authentication",
          "capabilities": ["JWT authentication", "Role-based access", "Session management", "Password security"]
        },
        "security": {
          "description": "Platform security measures",
          "capabilities": [
            "CSRF protection",
            "Rate limiting",
            "Input validation",
            "SQL injection prevention",
            "XSS protection"
          ]
        },
        "file_management": {
          "description": "File upload and storage",
          "capabilities": ["Image upload", "File validation", "Cloud storage", "CDN integration"]
        },
        "payment_integration": {
          "description": "Payment processing",
          "capabilities": ["ASAAS integration", "Multiple payment methods", "Subscription billing", "Webhook handling"]
        },
        "pwa_support": {
          "description": "Progressive Web App features",
          "capabilities": [
            "Offline functionality",
            "App-like experience",
            "Push notifications",
            "Service worker caching"
          ]
        }
      }
    },
    "security_measures": {
      "authentication": {
        "method": "JWT Bearer tokens",
        "expiration": "7 days",
        "password_hashing": "bcryptjs with 12 salt rounds"
      },
      "authorization": {
        "model": "Role-Based Access Control (RBAC)",
        "roles": ["BUYER", "SELLER", "ADMIN"],
        "route_protection": "Middleware-based route guards"
      },
      "input_validation": {
        "backend": "Zod schemas + express-validator",
        "frontend": "React Hook Form + Zod",
        "sanitization": "Built-in input sanitization middleware"
      },
      "security_headers": {
        "helmet": "Comprehensive security headers",
        "cors": "Configured CORS with specific origins",
        "csrf": "CSRF token protection for state-changing operations"
      },
      "rate_limiting": {
        "global": "General API rate limiting",
        "auth": "Stricter limits for authentication endpoints",
        "admin": "Separate limits for admin operations",
        "upload": "Special limits for file upload endpoints"
      },
      "audit_logging": {
        "scope": "All administrative actions",
        "details": "IP address, user agent, request details",
        "retention": "Configurable retention period"
      },
      "database_security": {
        "orm": "Prisma ORM prevents SQL injection",
        "connection": "Secure PostgreSQL connection via Supabase",
        "encryption": "Data encryption at rest and in transit"
      }
    },
    "deployment": {
      "frontend": {
        "platform": "Vercel",
        "build_command": "npm run build",
        "output_directory": "dist",
        "environment_variables": "Configured in Vercel dashboard"
      },
      "backend": {
        "platform": "Vercel (serverless functions) or traditional hosting",
        "start_command": "node server.js",
        "port": "4002 (configurable)",
        "environment_variables": "Required for database, payments, storage"
      },
      "database": {
        "provider": "Supabase PostgreSQL",
        "migration": "Prisma migrate",
        "seeding": "Custom seed scripts"
      },
      "storage": {
        "primary": "Supabase Storage",
        "fallback": "Cloudinary",
        "buckets": ["products", "stores", "avatars"]
      }
    },
    "development_setup": {
      "prerequisites": [
        "Node.js 18+",
        "npm or yarn",
        "PostgreSQL (via Supabase)",
        "Supabase account",
        "ASAAS account (for payments)"
      ],
      "environment_variables": {
        "required": [
          "DATABASE_URL",
          "NEXT_PUBLIC_SUPABASE_URL",
          "NEXT_PUBLIC_SUPABASE_ANON_KEY",
          "SUPABASE_SERVICE_ROLE_KEY",
          "JWT_SECRET"
        ],
        "optional": ["ASAAS_API_KEY", "ASAAS_BASE_URL", "CLOUDINARY_URL", "SMTP_CONFIG"]
      },
      "setup_commands": [
        "npm install",
        "cp .env.example .env",
        "npx prisma generate",
        "npx prisma db push",
        "npm run seed",
        "npm run dev"
      ],
      "dev_servers": {
        "frontend": "http://localhost:4173 (Vite)",
        "backend": "http://localhost:4002 (Express)",
        "concurrent": "npm run dev (both servers)"
      }
    },
    "testing": {
      "framework": "Playwright 1.55.0",
      "test_types": ["End-to-end", "Integration", "API testing"],
      "configuration": "playwright.config.ts",
      "coverage": "Built-in Playwright reporting"
    },
    "api_documentation": {
      "format": "OpenAPI 3.0 compatible",
      "interactive_docs": "Available via /api/docs (if implemented)",
      "postman_collection": "Can be generated from endpoints list",
      "authentication_example": {
        "header": "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
        "curl_example": "curl -H 'Authorization: Bearer <token>' http://localhost:4002/api/users/profile"
      }
    },
    "key_directories": {
      "/src/app/": "Next.js App Router style pages and layouts",
      "/src/components/": "Reusable React components organized by feature",
      "/src/store/": "Zustand state management stores",
      "/src/lib/": "Utility functions, configurations, and integrations",
      "/src/hooks/": "Custom React hooks for business logic",
      "/server/": "Express.js backend API server",
      "/server/routes/": "API route handlers organized by feature",
      "/server/lib/": "Backend utilities, database config, and shared logic",
      "/server/middleware/": "Express middleware for security, validation, etc.",
      "/prisma/": "Database schema, migrations, and seed scripts"
    },
    "mock_data_support": {
      "description": "Comprehensive mock data system for development and testing",
      "features": [
        "Mock user authentication system",
        "Sample product catalog",
        "Test payment scenarios",
        "Development-friendly defaults"
      ],
      "test_users": {
        "admin": {
          "email": "admin@test.com",
          "password": "123456",
          "type": "ADMIN"
        },
        "seller": {
          "email": "seller@test.com",
          "password": "Test123456",
          "type": "SELLER"
        },
        "testsprite": {
          "email": "gouveiarx@gmail.com",
          "password": "Teste123",
          "type": "SELLER"
        }
      }
    },
    "performance_optimizations": {
      "frontend": [
        "Vite fast build system",
        "React 18 concurrent features",
        "Image optimization with WebP",
        "Code splitting and lazy loading",
        "Service worker caching"
      ],
      "backend": [
        "Prisma query optimization",
        "Database connection pooling",
        "Express.js middleware optimization",
        "Rate limiting to prevent abuse"
      ],
      "database": [
        "Indexed foreign keys",
        "Optimized Prisma relations",
        "Query result pagination",
        "Supabase performance features"
      ]
    },
    "monitoring_and_logging": {
      "application_logs": "Console logging with structured format",
      "error_handling": "Global error handlers with correlation IDs",
      "audit_logs": "Administrative action tracking in database",
      "security_logs": "Security middleware logging",
      "performance_monitoring": "Built-in request timing and response monitoring"
    }
  }
}
